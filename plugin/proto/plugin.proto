syntax = "proto3";

package plugin;

import "google/protobuf/struct.proto";

option go_package = "github.com/schumann-it/dehydrated-api-go/plugin/proto";

// Plugin service defines the interface for dehydrated-api-go plugins.
// Plugins can provide additional functionality and metadata for domain entries.
// This service is implemented by external plugins that communicate via gRPC.
service Plugin {
  // Initialize is called when the plugin is loaded.
  // It receives the plugin configuration and dehydrated configuration.
  // The plugin should perform any necessary setup and validation.
  // Returns an error if initialization fails.
  rpc Initialize(InitializeRequest) returns (InitializeResponse) {}

  // GetMetadata returns metadata for a domain entry.
  // The plugin can enrich the domain entry with additional information
  // based on its configuration and capabilities.
  // The metadata returned will be merged with the existing metadata.
  rpc GetMetadata(GetMetadataRequest) returns (GetMetadataResponse) {}

  // Close is called when the plugin is being unloaded.
  // The plugin should perform any necessary cleanup and resource release.
  // Returns an error if cleanup fails.
  rpc Close(CloseRequest) returns (CloseResponse) {}
}

// DehydratedConfig contains the complete configuration for the dehydrated ACME client.
// It includes all settings needed to operate the dehydrated script.
// This configuration is passed to plugins to provide context for their operations.
message DehydratedConfig {
  // User and group settings for file permissions.
  string user = 1;
  string group = 2;

  // Base directories for dehydrated operation.
  string base_dir = 3;      // Root directory for dehydrated.
  string cert_dir = 4;      // Directory for certificates.
  string domains_dir = 5;   // Directory for domain configurations.
  string accounts_dir = 6;  // Directory for ACME account data.
  string challenges_dir = 7; // Directory for ACME challenges.
  string chain_cache = 8;   // Directory for certificate chain cache.

  // File paths for dehydrated operation.
  string domains_file = 9;  // Path to the domains.txt file.
  string config_file = 10;  // Path to the dehydrated config file.
  string hook_script = 11;  // Path to the hook script.
  string lock_file = 12;    // Path to the lock file.

  // OpenSSL settings for certificate generation.
  string openssl_config = 13; // Path to OpenSSL config file.
  string openssl = 14;        // Path to OpenSSL binary.
  int32 key_size = 15;        // RSA key size in bits (e.g., 2048, 4096).

  // ACME settings for Let's Encrypt integration.
  string ca = 16;             // Certificate Authority URL (e.g., https://acme-v02.api.letsencrypt.org/directory).
  string old_ca = 17;         // Old Certificate Authority URL for migration.
  bool accept_terms = 18;     // Whether to accept Let's Encrypt terms of service.
  bool ipv4 = 19;             // Whether to use IPv4 for challenges.
  bool ipv6 = 20;             // Whether to use IPv6 for challenges.
  string preferred_chain = 21; // Preferred certificate chain (e.g., "ISRG Root X1").
  string api = 22;            // API version to use (e.g., "v2").

  // Certificate settings for generation and renewal.
  string key_algo = 23;       // Key algorithm (e.g., "rsa", "ecdsa").
  int32 renew_days = 24;      // Days before renewal (e.g., 30).
  bool force_renew = 25;      // Whether to force renewal regardless of expiration.
  bool force_validation = 26;  // Whether to force domain validation.
  bool private_key_renew = 27; // Whether to renew private keys with certificates.
  bool private_key_rollover = 28; // Whether to use key rollover for smoother transitions.

  // Challenge settings for domain validation.
  string challenge_type = 29;  // Type of challenge to use (e.g., "http-01", "dns-01").
  string well_known_dir = 30;  // Directory for HTTP-01 challenges.
  string alpn_dir = 31;        // Directory for TLS-ALPN-01 challenges.
  bool hook_chain = 32;        // Whether to chain hook calls for efficiency.

  // OCSP settings for certificate status.
  bool ocsp_must_staple = 33;  // Whether to require OCSP stapling (improves security).
  bool ocsp_fetch = 34;        // Whether to fetch OCSP responses.
  int32 ocsp_days = 35;        // Days to keep OCSP responses (e.g., 7).

  // Other settings.
  bool no_lock = 36;           // Whether to disable file locking (use with caution).
  bool keep_going = 37;        // Whether to continue processing on errors.
  bool full_chain = 38;        // Whether to include full certificate chain.
  bool ocsp = 39;              // Whether to enable OCSP stapling.
  bool auto_cleanup = 40;      // Whether to automatically clean up old files.
  string contact_email = 41;   // Contact email for Let's Encrypt notifications.
  string curl_opts = 42;       // Additional curl options for HTTP requests.
  string config_d = 43;        // Additional config directory for extensions.
}

// InitializeRequest contains the configuration for the plugin.
// It includes both plugin-specific configuration and dehydrated configuration.
message InitializeRequest {
  // Plugin-specific configuration as a map of values.
  // The structure depends on the plugin implementation.
  map<string, google.protobuf.Value> config = 1;
}

// DomainEntry represents a domain configuration in the dehydrated system.
// It contains all information about a domain, including its names and metadata.
message DomainEntry {
  string domain = 1;           // Primary domain name (e.g., "example.com").
  repeated string alternative_names = 2; // Alternative domain names (e.g., "www.example.com").
  string alias = 3;            // Certificate alias for reference.
  bool enabled = 4;            // Whether the domain is enabled for certificate issuance.
  string comment = 5;          // Domain comment for documentation.
}

// InitializeResponse is empty as no data is needed.
// The plugin should return an error if initialization fails.
message InitializeResponse {}

// GetMetadataRequest contains the domain entry to get metadata for.
// It includes all fields from the domain entry that the plugin can use
// to generate or retrieve metadata.
message GetMetadataRequest {
  // The domain object containing all domain information.
  DomainEntry domain_entry = 1;

  // Dehydrated configuration for ACME client operation.
  // This provides context for the plugin about the dehydrated environment.
  DehydratedConfig dehydrated_config = 2;
}

// GetMetadataResponse contains the metadata for the domain entry.
// The plugin should return a map of metadata values that will be
// merged with the existing metadata.
message GetMetadataResponse {
  // Metadata key-value pairs to be added to the domain entry.
  // Values should be of appropriate types (string, number, boolean, etc.).
  map<string, google.protobuf.Value> metadata = 1;
}

// CloseRequest is empty as no data is needed.
// The plugin should perform cleanup when receiving this request.
message CloseRequest {}

// CloseResponse is empty as no data is needed.
// The plugin should return an error if cleanup fails.
message CloseResponse {} 