// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/domains": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all configured domains",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "List all domains",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DomainsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing authentication token",
                        "schema": {
                            "$ref": "#/definitions/model.DomainsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.DomainsResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new domain entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "Create a domain",
                "parameters": [
                    {
                        "description": "Domain creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateDomainRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid request body or domain already exists",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing authentication token",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/domains/{domain}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific domain",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "Get a domain",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Domain name",
                        "name": "domain",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional alias to uniquely identify the domain entry",
                        "name": "alias",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid domain parameter",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing authentication token",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Domain not found",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing domain entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "Update a domain",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Domain name",
                        "name": "domain",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional alias to uniquely identify the domain entry",
                        "name": "alias",
                        "in": "query"
                    },
                    {
                        "description": "Domain update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateDomainRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid request body or domain parameter",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing authentication token",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Domain not found",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a domain entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "Delete a domain",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Domain name",
                        "name": "domain",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional alias to uniquely identify the domain entry",
                        "name": "alias",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request - Invalid domain parameter",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing authentication token",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Domain not found",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check if the API is running and healthy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DomainsResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.CreateDomainRequest": {
            "description": "Request to create a new domain entry",
            "type": "object",
            "required": [
                "domain"
            ],
            "properties": {
                "alias": {
                    "description": "Alias is an optional alternative identifier.\n@Description Optional alternative identifier for the domain",
                    "type": "string",
                    "example": "my-domain"
                },
                "alternative_names": {
                    "description": "AlternativeNames is a list of additional domain names.\n@Description List of additional domain names (e.g., \"www.example.com\")",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "www.example.com",
                        "api.example.com"
                    ]
                },
                "comment": {
                    "description": "Comment is an optional description.\n@Description Optional description or comment for the domain",
                    "type": "string",
                    "example": "Production domain for web application"
                },
                "domain": {
                    "description": "Domain is the primary domain name (required).\n@Description Primary domain name (required)\n@required",
                    "type": "string",
                    "example": "example.com"
                },
                "enabled": {
                    "description": "Enabled indicates whether the domain should be active.\n@Description Whether the domain is enabled for certificate issuance",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.DomainEntry": {
            "description": "Domain configuration entry for SSL certificate management",
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Certificate alias for reference.",
                    "type": "string"
                },
                "alternative_names": {
                    "description": "Alternative domain names (e.g., \"www.example.com\").",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "description": "Domain comment for documentation.",
                    "type": "string"
                },
                "domain": {
                    "description": "Primary domain name (e.g., \"example.com\").",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether the domain is enabled for certificate issuance.",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata contains additional information about the domain entry.\n@Description Additional metadata about the domain entry",
                    "allOf": [
                        {
                            "$ref": "#/definitions/proto.Metadata"
                        }
                    ]
                }
            }
        },
        "model.DomainResponse": {
            "description": "Response containing a single domain entry",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains the domain entry if the operation was successful.\n@Description Domain entry data if the operation was successful",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DomainEntry"
                        }
                    ]
                },
                "error": {
                    "description": "Error contains an error message if the operation failed.\n@Description Error message if the operation failed",
                    "type": "string",
                    "example": "Domain not found"
                },
                "success": {
                    "description": "Success indicates whether the operation was successful.\n@Description Whether the operation was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.DomainsResponse": {
            "description": "Response containing multiple domain entries",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains the list of domain entries if the operation was successful.\n@Description List of domain entries if the operation was successful",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DomainEntry"
                    }
                },
                "error": {
                    "description": "Error contains an error message if the operation failed.\n@Description Error message if the operation failed",
                    "type": "string",
                    "example": "Failed to load domains"
                },
                "success": {
                    "description": "Success indicates whether the operation was successful.\n@Description Whether the operation was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.UpdateDomainRequest": {
            "description": "Request to update an existing domain entry",
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Alias is an optional alternative identifier.\n@Description Optional alternative identifier for the domain",
                    "type": "string",
                    "example": "my-domain"
                },
                "alternative_names": {
                    "description": "AlternativeNames is a list of additional domain names.\n@Description List of additional domain names (e.g., \"www.example.com\")",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "www.example.com",
                        "api.example.com"
                    ]
                },
                "comment": {
                    "description": "Comment is an optional description.\n@Description Optional description or comment for the domain",
                    "type": "string",
                    "example": "Production domain for web application"
                },
                "enabled": {
                    "description": "Enabled indicates whether the domain should be active.\n@Description Whether the domain is enabled for certificate issuance",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "proto.Metadata": {
            "type": "object"
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token. Authentication is optional and depends on server configuration. When authentication is disabled, this header is not required.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "BearerAuth": []
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Dehydrated API",
	Description:      "Authentication is optional and depends on server configuration. When enabled, all API endpoints require a valid JWT token in the Authorization header. When disabled, no authentication is required.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
