{
    "swagger": "2.0",
    "info": {
        "description": "Authentication is optional and depends on server configuration. When enabled, all API endpoints require a valid JWT token in the Authorization header. When disabled, no authentication is required.",
        "title": "Dehydrated API",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:3000",
    "basePath": "/",
    "paths": {
        "/api/v1/domains": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all configured domains",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "List all domains",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DomainsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing authentication token",
                        "schema": {
                            "$ref": "#/definitions/model.DomainsResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/model.DomainsResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new domain entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "Create a domain",
                "parameters": [
                    {
                        "description": "Domain creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CreateDomainRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid request body or domain already exists",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing authentication token",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/domains/{domain}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get details of a specific domain",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "Get a domain",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Domain name",
                        "name": "domain",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional alias to uniquely identify the domain entry",
                        "name": "alias",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid domain parameter",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing authentication token",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Domain not found",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing domain entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "Update a domain",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Domain name",
                        "name": "domain",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional alias to uniquely identify the domain entry",
                        "name": "alias",
                        "in": "query"
                    },
                    {
                        "description": "Domain update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UpdateDomainRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid request body or domain parameter",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing authentication token",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Domain not found",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a domain entry",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "domains"
                ],
                "summary": "Delete a domain",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Domain name",
                        "name": "domain",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Optional alias to uniquely identify the domain entry",
                        "name": "alias",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request - Invalid domain parameter",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing authentication token",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Domain not found",
                        "schema": {
                            "$ref": "#/definitions/model.DomainResponse"
                        }
                    }
                }
            }
        },
        "/config": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve the current dehydrated configuration settings including paths, certificates, and operational parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "config"
                ],
                "summary": "Get dehydrated configuration",
                "responses": {
                    "200": {
                        "description": "Configuration retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid or missing authentication token",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error - Failed to retrieve configuration",
                        "schema": {
                            "$ref": "#/definitions/model.ConfigResponse"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Check if the API is running and healthy",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.DomainsResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dehydrated.Config": {
            "type": "object",
            "properties": {
                "accept_terms": {
                    "description": "Whether to accept Let's Encrypt terms of service.",
                    "type": "boolean"
                },
                "accounts_dir": {
                    "description": "Directory for ACME account data.",
                    "type": "string"
                },
                "alpn_dir": {
                    "description": "Directory for TLS-ALPN-01 challenges.",
                    "type": "string"
                },
                "api": {
                    "description": "API version to use (e.g., \"v2\").",
                    "type": "string"
                },
                "auto_cleanup": {
                    "description": "Whether to automatically clean up old files.",
                    "type": "boolean"
                },
                "base_dir": {
                    "description": "Base directories for dehydrated operation.",
                    "type": "string"
                },
                "ca": {
                    "description": "ACME settings for Let's Encrypt integration.",
                    "type": "string"
                },
                "cert_dir": {
                    "description": "Directory for certificates.",
                    "type": "string"
                },
                "chain_cache": {
                    "description": "Directory for certificate chain cache.",
                    "type": "string"
                },
                "challenge_type": {
                    "description": "Challenge settings for domain validation.",
                    "type": "string"
                },
                "challenges_dir": {
                    "description": "Directory for ACME challenges.",
                    "type": "string"
                },
                "config_d": {
                    "description": "Additional config directory for extensions.",
                    "type": "string"
                },
                "config_file": {
                    "description": "Path to the dehydrated config file.",
                    "type": "string"
                },
                "contact_email": {
                    "description": "Contact email for Let's Encrypt notifications.",
                    "type": "string"
                },
                "curl_opts": {
                    "description": "Additional curl options for HTTP requests.",
                    "type": "string"
                },
                "domains_dir": {
                    "description": "Directory for domain configurations.",
                    "type": "string"
                },
                "domains_file": {
                    "description": "File paths for dehydrated operation.",
                    "type": "string"
                },
                "force_renew": {
                    "description": "Whether to force renewal regardless of expiration.",
                    "type": "boolean"
                },
                "force_validation": {
                    "description": "Whether to force domain validation.",
                    "type": "boolean"
                },
                "full_chain": {
                    "description": "Whether to include full certificate chain.",
                    "type": "boolean"
                },
                "group": {
                    "type": "string"
                },
                "hook_chain": {
                    "description": "Whether to chain hook calls for efficiency.",
                    "type": "boolean"
                },
                "hook_script": {
                    "description": "Path to the hook script.",
                    "type": "string"
                },
                "ipv4": {
                    "description": "Whether to use IPv4 for challenges.",
                    "type": "boolean"
                },
                "ipv6": {
                    "description": "Whether to use IPv6 for challenges.",
                    "type": "boolean"
                },
                "keep_going": {
                    "description": "Whether to continue processing on errors.",
                    "type": "boolean"
                },
                "key_algo": {
                    "description": "Certificate settings for generation and renewal.",
                    "type": "string"
                },
                "key_size": {
                    "description": "RSA key size in bits (e.g., 2048, 4096).",
                    "type": "integer"
                },
                "lock_file": {
                    "description": "Path to the lock file.",
                    "type": "string"
                },
                "no_lock": {
                    "description": "Other settings.",
                    "type": "boolean"
                },
                "ocsp": {
                    "description": "Whether to enable OCSP stapling.",
                    "type": "boolean"
                },
                "ocsp_days": {
                    "description": "Days to keep OCSP responses (e.g., 7).",
                    "type": "integer"
                },
                "ocsp_fetch": {
                    "description": "Whether to fetch OCSP responses.",
                    "type": "boolean"
                },
                "ocsp_must_staple": {
                    "description": "OCSP settings for certificate status.",
                    "type": "boolean"
                },
                "old_ca": {
                    "description": "Old Certificate Authority URL for migration.",
                    "type": "string"
                },
                "openssl": {
                    "description": "Path to OpenSSL binary.",
                    "type": "string"
                },
                "openssl_config": {
                    "description": "OpenSSL settings for certificate generation.",
                    "type": "string"
                },
                "preferred_chain": {
                    "description": "Preferred certificate chain (e.g., \"ISRG Root X1\").",
                    "type": "string"
                },
                "private_key_renew": {
                    "description": "Whether to renew private keys with certificates.",
                    "type": "boolean"
                },
                "private_key_rollover": {
                    "description": "Whether to use key rollover for smoother transitions.",
                    "type": "boolean"
                },
                "renew_days": {
                    "description": "Days before renewal (e.g., 30).",
                    "type": "integer"
                },
                "user": {
                    "description": "User and group settings for file permissions.",
                    "type": "string"
                },
                "well_known_dir": {
                    "description": "Directory for HTTP-01 challenges.",
                    "type": "string"
                }
            }
        },
        "model.ConfigResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/dehydrated.Config"
                },
                "error": {
                    "type": "string",
                    "example": "Failed to load config"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.CreateDomainRequest": {
            "description": "Request to create a new domain entry",
            "type": "object",
            "required": [
                "domain"
            ],
            "properties": {
                "alias": {
                    "description": "Alias is an optional alternative identifier.\n@Description Optional alternative identifier for the domain",
                    "type": "string",
                    "example": "my-domain"
                },
                "alternative_names": {
                    "description": "AlternativeNames is a list of additional domain names.\n@Description List of additional domain names (e.g., \"www.example.com\")",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "www.example.com",
                        "api.example.com"
                    ]
                },
                "comment": {
                    "description": "Comment is an optional description.\n@Description Optional description or comment for the domain",
                    "type": "string",
                    "example": "Production domain for web application"
                },
                "domain": {
                    "description": "Domain is the primary domain name (required).\n@Description Primary domain name (required)\n@required",
                    "type": "string",
                    "example": "example.com"
                },
                "enabled": {
                    "description": "Enabled indicates whether the domain should be active.\n@Description Whether the domain is enabled for certificate issuance",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.DomainEntry": {
            "description": "Domain configuration entry for SSL certificate management",
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Certificate alias for reference.",
                    "type": "string"
                },
                "alternative_names": {
                    "description": "Alternative domain names (e.g., \"www.example.com\").",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "comment": {
                    "description": "Domain comment for documentation.",
                    "type": "string"
                },
                "domain": {
                    "description": "Primary domain name (e.g., \"example.com\").",
                    "type": "string"
                },
                "enabled": {
                    "description": "Whether the domain is enabled for certificate issuance.",
                    "type": "boolean"
                },
                "metadata": {
                    "description": "Metadata contains additional information about the domain entry.\n@Description Additional metadata about the domain entry",
                    "allOf": [
                        {
                            "$ref": "#/definitions/proto.Metadata"
                        }
                    ]
                }
            }
        },
        "model.DomainResponse": {
            "description": "Response containing a single domain entry",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains the domain entry if the operation was successful.\n@Description Domain entry data if the operation was successful",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.DomainEntry"
                        }
                    ]
                },
                "error": {
                    "description": "Error contains an error message if the operation failed.\n@Description Error message if the operation failed",
                    "type": "string",
                    "example": "Domain not found"
                },
                "success": {
                    "description": "Success indicates whether the operation was successful.\n@Description Whether the operation was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.DomainsResponse": {
            "description": "Response containing multiple domain entries",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data contains the list of domain entries if the operation was successful.\n@Description List of domain entries if the operation was successful",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.DomainEntry"
                    }
                },
                "error": {
                    "description": "Error contains an error message if the operation failed.\n@Description Error message if the operation failed",
                    "type": "string",
                    "example": "Failed to load domains"
                },
                "success": {
                    "description": "Success indicates whether the operation was successful.\n@Description Whether the operation was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.UpdateDomainRequest": {
            "description": "Request to update an existing domain entry",
            "type": "object",
            "properties": {
                "alias": {
                    "description": "Alias is an optional alternative identifier.\n@Description Optional alternative identifier for the domain",
                    "type": "string",
                    "example": "my-domain"
                },
                "alternative_names": {
                    "description": "AlternativeNames is a list of additional domain names.\n@Description List of additional domain names (e.g., \"www.example.com\")",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "www.example.com",
                        "api.example.com"
                    ]
                },
                "comment": {
                    "description": "Comment is an optional description.\n@Description Optional description or comment for the domain",
                    "type": "string",
                    "example": "Production domain for web application"
                },
                "enabled": {
                    "description": "Enabled indicates whether the domain should be active.\n@Description Whether the domain is enabled for certificate issuance",
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "proto.Metadata": {
            "type": "object"
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token. Authentication is optional and depends on server configuration. When authentication is disabled, this header is not required.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "security": [
        {
            "BearerAuth": []
        }
    ]
}