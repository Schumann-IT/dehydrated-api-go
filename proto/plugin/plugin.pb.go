// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: plugin.proto

package plugin

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DehydratedConfig contains the complete configuration for the dehydrated ACME client.
// It includes all settings needed to operate the dehydrated script.
type DehydratedConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// User and group settings for file permissions
	User  string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Group string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	// Base directories for dehydrated operation
	BaseDir       string `protobuf:"bytes,3,opt,name=base_dir,json=baseDir,proto3" json:"base_dir,omitempty"`                   // Root directory for dehydrated
	CertDir       string `protobuf:"bytes,4,opt,name=cert_dir,json=certDir,proto3" json:"cert_dir,omitempty"`                   // Directory for certificates
	DomainsDir    string `protobuf:"bytes,5,opt,name=domains_dir,json=domainsDir,proto3" json:"domains_dir,omitempty"`          // Directory for domain configurations
	AccountsDir   string `protobuf:"bytes,6,opt,name=accounts_dir,json=accountsDir,proto3" json:"accounts_dir,omitempty"`       // Directory for ACME account data
	ChallengesDir string `protobuf:"bytes,7,opt,name=challenges_dir,json=challengesDir,proto3" json:"challenges_dir,omitempty"` // Directory for ACME challenges
	ChainCache    string `protobuf:"bytes,8,opt,name=chain_cache,json=chainCache,proto3" json:"chain_cache,omitempty"`          // Directory for certificate chain cache
	// File paths for dehydrated operation
	DomainsFile string `protobuf:"bytes,9,opt,name=domains_file,json=domainsFile,proto3" json:"domains_file,omitempty"` // Path to the domains.txt file
	ConfigFile  string `protobuf:"bytes,10,opt,name=config_file,json=configFile,proto3" json:"config_file,omitempty"`   // Path to the dehydrated config file
	HookScript  string `protobuf:"bytes,11,opt,name=hook_script,json=hookScript,proto3" json:"hook_script,omitempty"`   // Path to the hook script
	LockFile    string `protobuf:"bytes,12,opt,name=lock_file,json=lockFile,proto3" json:"lock_file,omitempty"`         // Path to the lock file
	// OpenSSL settings for certificate generation
	OpensslConfig string `protobuf:"bytes,13,opt,name=openssl_config,json=opensslConfig,proto3" json:"openssl_config,omitempty"` // Path to OpenSSL config file
	Openssl       string `protobuf:"bytes,14,opt,name=openssl,proto3" json:"openssl,omitempty"`                                  // Path to OpenSSL binary
	KeySize       int32  `protobuf:"varint,15,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`                  // RSA key size in bits
	// ACME settings for Let's Encrypt integration
	Ca             string `protobuf:"bytes,16,opt,name=ca,proto3" json:"ca,omitempty"`                                               // Certificate Authority URL
	OldCa          string `protobuf:"bytes,17,opt,name=old_ca,json=oldCa,proto3" json:"old_ca,omitempty"`                            // Old Certificate Authority URL
	AcceptTerms    bool   `protobuf:"varint,18,opt,name=accept_terms,json=acceptTerms,proto3" json:"accept_terms,omitempty"`         // Whether to accept Let's Encrypt terms
	Ipv4           bool   `protobuf:"varint,19,opt,name=ipv4,proto3" json:"ipv4,omitempty"`                                          // Whether to use IPv4
	Ipv6           bool   `protobuf:"varint,20,opt,name=ipv6,proto3" json:"ipv6,omitempty"`                                          // Whether to use IPv6
	PreferredChain string `protobuf:"bytes,21,opt,name=preferred_chain,json=preferredChain,proto3" json:"preferred_chain,omitempty"` // Preferred certificate chain
	Api            string `protobuf:"bytes,22,opt,name=api,proto3" json:"api,omitempty"`                                             // API version to use
	// Certificate settings for generation and renewal
	KeyAlgo            string `protobuf:"bytes,23,opt,name=key_algo,json=keyAlgo,proto3" json:"key_algo,omitempty"`                                     // Key algorithm (RSA or ECDSA)
	RenewDays          int32  `protobuf:"varint,24,opt,name=renew_days,json=renewDays,proto3" json:"renew_days,omitempty"`                              // Days before renewal
	ForceRenew         bool   `protobuf:"varint,25,opt,name=force_renew,json=forceRenew,proto3" json:"force_renew,omitempty"`                           // Whether to force renewal
	ForceValidation    bool   `protobuf:"varint,26,opt,name=force_validation,json=forceValidation,proto3" json:"force_validation,omitempty"`            // Whether to force validation
	PrivateKeyRenew    bool   `protobuf:"varint,27,opt,name=private_key_renew,json=privateKeyRenew,proto3" json:"private_key_renew,omitempty"`          // Whether to renew private keys
	PrivateKeyRollover bool   `protobuf:"varint,28,opt,name=private_key_rollover,json=privateKeyRollover,proto3" json:"private_key_rollover,omitempty"` // Whether to use key rollover
	// Challenge settings for domain validation
	ChallengeType string `protobuf:"bytes,29,opt,name=challenge_type,json=challengeType,proto3" json:"challenge_type,omitempty"` // Type of challenge to use
	WellKnownDir  string `protobuf:"bytes,30,opt,name=well_known_dir,json=wellKnownDir,proto3" json:"well_known_dir,omitempty"`  // Directory for HTTP-01 challenges
	AlpnDir       string `protobuf:"bytes,31,opt,name=alpn_dir,json=alpnDir,proto3" json:"alpn_dir,omitempty"`                   // Directory for TLS-ALPN-01 challenges
	HookChain     bool   `protobuf:"varint,32,opt,name=hook_chain,json=hookChain,proto3" json:"hook_chain,omitempty"`            // Whether to chain hook calls
	// OCSP settings for certificate status
	OcspMustStaple bool  `protobuf:"varint,33,opt,name=ocsp_must_staple,json=ocspMustStaple,proto3" json:"ocsp_must_staple,omitempty"` // Whether to require OCSP stapling
	OcspFetch      bool  `protobuf:"varint,34,opt,name=ocsp_fetch,json=ocspFetch,proto3" json:"ocsp_fetch,omitempty"`                  // Whether to fetch OCSP responses
	OcspDays       int32 `protobuf:"varint,35,opt,name=ocsp_days,json=ocspDays,proto3" json:"ocsp_days,omitempty"`                     // Days to keep OCSP responses
	// Other settings
	NoLock        bool   `protobuf:"varint,36,opt,name=no_lock,json=noLock,proto3" json:"no_lock,omitempty"`                  // Whether to disable file locking
	KeepGoing     bool   `protobuf:"varint,37,opt,name=keep_going,json=keepGoing,proto3" json:"keep_going,omitempty"`         // Whether to continue on errors
	FullChain     bool   `protobuf:"varint,38,opt,name=full_chain,json=fullChain,proto3" json:"full_chain,omitempty"`         // Whether to include full chain
	Ocsp          bool   `protobuf:"varint,39,opt,name=ocsp,proto3" json:"ocsp,omitempty"`                                    // Whether to enable OCSP
	AutoCleanup   bool   `protobuf:"varint,40,opt,name=auto_cleanup,json=autoCleanup,proto3" json:"auto_cleanup,omitempty"`   // Whether to auto-cleanup
	ContactEmail  string `protobuf:"bytes,41,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"` // Contact email for Let's Encrypt
	CurlOpts      string `protobuf:"bytes,42,opt,name=curl_opts,json=curlOpts,proto3" json:"curl_opts,omitempty"`             // Additional curl options
	ConfigD       string `protobuf:"bytes,43,opt,name=config_d,json=configD,proto3" json:"config_d,omitempty"`                // Additional config directory
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DehydratedConfig) Reset() {
	*x = DehydratedConfig{}
	mi := &file_plugin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DehydratedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DehydratedConfig) ProtoMessage() {}

func (x *DehydratedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DehydratedConfig.ProtoReflect.Descriptor instead.
func (*DehydratedConfig) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *DehydratedConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DehydratedConfig) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *DehydratedConfig) GetBaseDir() string {
	if x != nil {
		return x.BaseDir
	}
	return ""
}

func (x *DehydratedConfig) GetCertDir() string {
	if x != nil {
		return x.CertDir
	}
	return ""
}

func (x *DehydratedConfig) GetDomainsDir() string {
	if x != nil {
		return x.DomainsDir
	}
	return ""
}

func (x *DehydratedConfig) GetAccountsDir() string {
	if x != nil {
		return x.AccountsDir
	}
	return ""
}

func (x *DehydratedConfig) GetChallengesDir() string {
	if x != nil {
		return x.ChallengesDir
	}
	return ""
}

func (x *DehydratedConfig) GetChainCache() string {
	if x != nil {
		return x.ChainCache
	}
	return ""
}

func (x *DehydratedConfig) GetDomainsFile() string {
	if x != nil {
		return x.DomainsFile
	}
	return ""
}

func (x *DehydratedConfig) GetConfigFile() string {
	if x != nil {
		return x.ConfigFile
	}
	return ""
}

func (x *DehydratedConfig) GetHookScript() string {
	if x != nil {
		return x.HookScript
	}
	return ""
}

func (x *DehydratedConfig) GetLockFile() string {
	if x != nil {
		return x.LockFile
	}
	return ""
}

func (x *DehydratedConfig) GetOpensslConfig() string {
	if x != nil {
		return x.OpensslConfig
	}
	return ""
}

func (x *DehydratedConfig) GetOpenssl() string {
	if x != nil {
		return x.Openssl
	}
	return ""
}

func (x *DehydratedConfig) GetKeySize() int32 {
	if x != nil {
		return x.KeySize
	}
	return 0
}

func (x *DehydratedConfig) GetCa() string {
	if x != nil {
		return x.Ca
	}
	return ""
}

func (x *DehydratedConfig) GetOldCa() string {
	if x != nil {
		return x.OldCa
	}
	return ""
}

func (x *DehydratedConfig) GetAcceptTerms() bool {
	if x != nil {
		return x.AcceptTerms
	}
	return false
}

func (x *DehydratedConfig) GetIpv4() bool {
	if x != nil {
		return x.Ipv4
	}
	return false
}

func (x *DehydratedConfig) GetIpv6() bool {
	if x != nil {
		return x.Ipv6
	}
	return false
}

func (x *DehydratedConfig) GetPreferredChain() string {
	if x != nil {
		return x.PreferredChain
	}
	return ""
}

func (x *DehydratedConfig) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *DehydratedConfig) GetKeyAlgo() string {
	if x != nil {
		return x.KeyAlgo
	}
	return ""
}

func (x *DehydratedConfig) GetRenewDays() int32 {
	if x != nil {
		return x.RenewDays
	}
	return 0
}

func (x *DehydratedConfig) GetForceRenew() bool {
	if x != nil {
		return x.ForceRenew
	}
	return false
}

func (x *DehydratedConfig) GetForceValidation() bool {
	if x != nil {
		return x.ForceValidation
	}
	return false
}

func (x *DehydratedConfig) GetPrivateKeyRenew() bool {
	if x != nil {
		return x.PrivateKeyRenew
	}
	return false
}

func (x *DehydratedConfig) GetPrivateKeyRollover() bool {
	if x != nil {
		return x.PrivateKeyRollover
	}
	return false
}

func (x *DehydratedConfig) GetChallengeType() string {
	if x != nil {
		return x.ChallengeType
	}
	return ""
}

func (x *DehydratedConfig) GetWellKnownDir() string {
	if x != nil {
		return x.WellKnownDir
	}
	return ""
}

func (x *DehydratedConfig) GetAlpnDir() string {
	if x != nil {
		return x.AlpnDir
	}
	return ""
}

func (x *DehydratedConfig) GetHookChain() bool {
	if x != nil {
		return x.HookChain
	}
	return false
}

func (x *DehydratedConfig) GetOcspMustStaple() bool {
	if x != nil {
		return x.OcspMustStaple
	}
	return false
}

func (x *DehydratedConfig) GetOcspFetch() bool {
	if x != nil {
		return x.OcspFetch
	}
	return false
}

func (x *DehydratedConfig) GetOcspDays() int32 {
	if x != nil {
		return x.OcspDays
	}
	return 0
}

func (x *DehydratedConfig) GetNoLock() bool {
	if x != nil {
		return x.NoLock
	}
	return false
}

func (x *DehydratedConfig) GetKeepGoing() bool {
	if x != nil {
		return x.KeepGoing
	}
	return false
}

func (x *DehydratedConfig) GetFullChain() bool {
	if x != nil {
		return x.FullChain
	}
	return false
}

func (x *DehydratedConfig) GetOcsp() bool {
	if x != nil {
		return x.Ocsp
	}
	return false
}

func (x *DehydratedConfig) GetAutoCleanup() bool {
	if x != nil {
		return x.AutoCleanup
	}
	return false
}

func (x *DehydratedConfig) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *DehydratedConfig) GetCurlOpts() string {
	if x != nil {
		return x.CurlOpts
	}
	return ""
}

func (x *DehydratedConfig) GetConfigD() string {
	if x != nil {
		return x.ConfigD
	}
	return ""
}

// InitializeRequest contains the configuration for the plugin.
// It includes both plugin-specific configuration and dehydrated configuration.
type InitializeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Plugin-specific configuration as a map of values
	Config map[string]*structpb.Value `protobuf:"bytes,1,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Dehydrated configuration for ACME client operation
	DehydratedConfig *DehydratedConfig `protobuf:"bytes,2,opt,name=dehydrated_config,json=dehydratedConfig,proto3" json:"dehydrated_config,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *InitializeRequest) Reset() {
	*x = InitializeRequest{}
	mi := &file_plugin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeRequest) ProtoMessage() {}

func (x *InitializeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeRequest.ProtoReflect.Descriptor instead.
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *InitializeRequest) GetConfig() map[string]*structpb.Value {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *InitializeRequest) GetDehydratedConfig() *DehydratedConfig {
	if x != nil {
		return x.DehydratedConfig
	}
	return nil
}

// InitializeResponse is empty as no data is needed.
// The plugin should return an error if initialization fails.
type InitializeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InitializeResponse) Reset() {
	*x = InitializeResponse{}
	mi := &file_plugin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InitializeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeResponse) ProtoMessage() {}

func (x *InitializeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeResponse.ProtoReflect.Descriptor instead.
func (*InitializeResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{2}
}

// GetMetadataRequest contains the domain entry to get metadata for.
// It includes all fields from the domain entry that the plugin can use
// to generate or retrieve metadata.
type GetMetadataRequest struct {
	state            protoimpl.MessageState     `protogen:"open.v1"`
	Domain           string                     `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`                                                                               // Primary domain name
	AlternativeNames []string                   `protobuf:"bytes,2,rep,name=alternative_names,json=alternativeNames,proto3" json:"alternative_names,omitempty"`                                   // Alternative domain names
	Alias            string                     `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`                                                                                 // Certificate alias
	Enabled          bool                       `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`                                                                            // Whether the domain is enabled
	Comment          string                     `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`                                                                             // Domain comment
	Metadata         map[string]*structpb.Value `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Existing metadata
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GetMetadataRequest) Reset() {
	*x = GetMetadataRequest{}
	mi := &file_plugin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetadataRequest) ProtoMessage() {}

func (x *GetMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetMetadataRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *GetMetadataRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *GetMetadataRequest) GetAlternativeNames() []string {
	if x != nil {
		return x.AlternativeNames
	}
	return nil
}

func (x *GetMetadataRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *GetMetadataRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *GetMetadataRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *GetMetadataRequest) GetMetadata() map[string]*structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// GetMetadataResponse contains the metadata for the domain entry.
// The plugin should return a map of metadata values that will be
// merged with the existing metadata.
type GetMetadataResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Metadata      map[string]*structpb.Value `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMetadataResponse) Reset() {
	*x = GetMetadataResponse{}
	mi := &file_plugin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMetadataResponse) ProtoMessage() {}

func (x *GetMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetMetadataResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *GetMetadataResponse) GetMetadata() map[string]*structpb.Value {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// CloseRequest is empty as no data is needed.
// The plugin should perform cleanup when receiving this request.
type CloseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseRequest) Reset() {
	*x = CloseRequest{}
	mi := &file_plugin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseRequest) ProtoMessage() {}

func (x *CloseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseRequest.ProtoReflect.Descriptor instead.
func (*CloseRequest) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{5}
}

// CloseResponse is empty as no data is needed.
// The plugin should return an error if cleanup fails.
type CloseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CloseResponse) Reset() {
	*x = CloseResponse{}
	mi := &file_plugin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseResponse) ProtoMessage() {}

func (x *CloseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseResponse.ProtoReflect.Descriptor instead.
func (*CloseResponse) Descriptor() ([]byte, []int) {
	return file_plugin_proto_rawDescGZIP(), []int{6}
}

var File_plugin_proto protoreflect.FileDescriptor

const file_plugin_proto_rawDesc = "" +
	"\n" +
	"\fplugin.proto\x12\x06plugin\x1a\x1cgoogle/protobuf/struct.proto\"\xc5\n" +
	"\n" +
	"\x10DehydratedConfig\x12\x12\n" +
	"\x04user\x18\x01 \x01(\tR\x04user\x12\x14\n" +
	"\x05group\x18\x02 \x01(\tR\x05group\x12\x19\n" +
	"\bbase_dir\x18\x03 \x01(\tR\abaseDir\x12\x19\n" +
	"\bcert_dir\x18\x04 \x01(\tR\acertDir\x12\x1f\n" +
	"\vdomains_dir\x18\x05 \x01(\tR\n" +
	"domainsDir\x12!\n" +
	"\faccounts_dir\x18\x06 \x01(\tR\vaccountsDir\x12%\n" +
	"\x0echallenges_dir\x18\a \x01(\tR\rchallengesDir\x12\x1f\n" +
	"\vchain_cache\x18\b \x01(\tR\n" +
	"chainCache\x12!\n" +
	"\fdomains_file\x18\t \x01(\tR\vdomainsFile\x12\x1f\n" +
	"\vconfig_file\x18\n" +
	" \x01(\tR\n" +
	"configFile\x12\x1f\n" +
	"\vhook_script\x18\v \x01(\tR\n" +
	"hookScript\x12\x1b\n" +
	"\tlock_file\x18\f \x01(\tR\blockFile\x12%\n" +
	"\x0eopenssl_config\x18\r \x01(\tR\ropensslConfig\x12\x18\n" +
	"\aopenssl\x18\x0e \x01(\tR\aopenssl\x12\x19\n" +
	"\bkey_size\x18\x0f \x01(\x05R\akeySize\x12\x0e\n" +
	"\x02ca\x18\x10 \x01(\tR\x02ca\x12\x15\n" +
	"\x06old_ca\x18\x11 \x01(\tR\x05oldCa\x12!\n" +
	"\faccept_terms\x18\x12 \x01(\bR\vacceptTerms\x12\x12\n" +
	"\x04ipv4\x18\x13 \x01(\bR\x04ipv4\x12\x12\n" +
	"\x04ipv6\x18\x14 \x01(\bR\x04ipv6\x12'\n" +
	"\x0fpreferred_chain\x18\x15 \x01(\tR\x0epreferredChain\x12\x10\n" +
	"\x03api\x18\x16 \x01(\tR\x03api\x12\x19\n" +
	"\bkey_algo\x18\x17 \x01(\tR\akeyAlgo\x12\x1d\n" +
	"\n" +
	"renew_days\x18\x18 \x01(\x05R\trenewDays\x12\x1f\n" +
	"\vforce_renew\x18\x19 \x01(\bR\n" +
	"forceRenew\x12)\n" +
	"\x10force_validation\x18\x1a \x01(\bR\x0fforceValidation\x12*\n" +
	"\x11private_key_renew\x18\x1b \x01(\bR\x0fprivateKeyRenew\x120\n" +
	"\x14private_key_rollover\x18\x1c \x01(\bR\x12privateKeyRollover\x12%\n" +
	"\x0echallenge_type\x18\x1d \x01(\tR\rchallengeType\x12$\n" +
	"\x0ewell_known_dir\x18\x1e \x01(\tR\fwellKnownDir\x12\x19\n" +
	"\balpn_dir\x18\x1f \x01(\tR\aalpnDir\x12\x1d\n" +
	"\n" +
	"hook_chain\x18  \x01(\bR\thookChain\x12(\n" +
	"\x10ocsp_must_staple\x18! \x01(\bR\x0eocspMustStaple\x12\x1d\n" +
	"\n" +
	"ocsp_fetch\x18\" \x01(\bR\tocspFetch\x12\x1b\n" +
	"\tocsp_days\x18# \x01(\x05R\bocspDays\x12\x17\n" +
	"\ano_lock\x18$ \x01(\bR\x06noLock\x12\x1d\n" +
	"\n" +
	"keep_going\x18% \x01(\bR\tkeepGoing\x12\x1d\n" +
	"\n" +
	"full_chain\x18& \x01(\bR\tfullChain\x12\x12\n" +
	"\x04ocsp\x18' \x01(\bR\x04ocsp\x12!\n" +
	"\fauto_cleanup\x18( \x01(\bR\vautoCleanup\x12#\n" +
	"\rcontact_email\x18) \x01(\tR\fcontactEmail\x12\x1b\n" +
	"\tcurl_opts\x18* \x01(\tR\bcurlOpts\x12\x19\n" +
	"\bconfig_d\x18+ \x01(\tR\aconfigD\"\xec\x01\n" +
	"\x11InitializeRequest\x12=\n" +
	"\x06config\x18\x01 \x03(\v2%.plugin.InitializeRequest.ConfigEntryR\x06config\x12E\n" +
	"\x11dehydrated_config\x18\x02 \x01(\v2\x18.plugin.DehydratedConfigR\x10dehydratedConfig\x1aQ\n" +
	"\vConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\x14\n" +
	"\x12InitializeResponse\"\xbe\x02\n" +
	"\x12GetMetadataRequest\x12\x16\n" +
	"\x06domain\x18\x01 \x01(\tR\x06domain\x12+\n" +
	"\x11alternative_names\x18\x02 \x03(\tR\x10alternativeNames\x12\x14\n" +
	"\x05alias\x18\x03 \x01(\tR\x05alias\x12\x18\n" +
	"\aenabled\x18\x04 \x01(\bR\aenabled\x12\x18\n" +
	"\acomment\x18\x05 \x01(\tR\acomment\x12D\n" +
	"\bmetadata\x18\x06 \x03(\v2(.plugin.GetMetadataRequest.MetadataEntryR\bmetadata\x1aS\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\xb1\x01\n" +
	"\x13GetMetadataResponse\x12E\n" +
	"\bmetadata\x18\x01 \x03(\v2).plugin.GetMetadataResponse.MetadataEntryR\bmetadata\x1aS\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.google.protobuf.ValueR\x05value:\x028\x01\"\x0e\n" +
	"\fCloseRequest\"\x0f\n" +
	"\rCloseResponse2\xd1\x01\n" +
	"\x06Plugin\x12E\n" +
	"\n" +
	"Initialize\x12\x19.plugin.InitializeRequest\x1a\x1a.plugin.InitializeResponse\"\x00\x12H\n" +
	"\vGetMetadata\x12\x1a.plugin.GetMetadataRequest\x1a\x1b.plugin.GetMetadataResponse\"\x00\x126\n" +
	"\x05Close\x12\x14.plugin.CloseRequest\x1a\x15.plugin.CloseResponse\"\x00B7Z5github.com/schumann-it/dehydrated-api-go/proto/pluginb\x06proto3"

var (
	file_plugin_proto_rawDescOnce sync.Once
	file_plugin_proto_rawDescData []byte
)

func file_plugin_proto_rawDescGZIP() []byte {
	file_plugin_proto_rawDescOnce.Do(func() {
		file_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_plugin_proto_rawDesc), len(file_plugin_proto_rawDesc)))
	})
	return file_plugin_proto_rawDescData
}

var file_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_plugin_proto_goTypes = []any{
	(*DehydratedConfig)(nil),    // 0: plugin.DehydratedConfig
	(*InitializeRequest)(nil),   // 1: plugin.InitializeRequest
	(*InitializeResponse)(nil),  // 2: plugin.InitializeResponse
	(*GetMetadataRequest)(nil),  // 3: plugin.GetMetadataRequest
	(*GetMetadataResponse)(nil), // 4: plugin.GetMetadataResponse
	(*CloseRequest)(nil),        // 5: plugin.CloseRequest
	(*CloseResponse)(nil),       // 6: plugin.CloseResponse
	nil,                         // 7: plugin.InitializeRequest.ConfigEntry
	nil,                         // 8: plugin.GetMetadataRequest.MetadataEntry
	nil,                         // 9: plugin.GetMetadataResponse.MetadataEntry
	(*structpb.Value)(nil),      // 10: google.protobuf.Value
}
var file_plugin_proto_depIdxs = []int32{
	7,  // 0: plugin.InitializeRequest.config:type_name -> plugin.InitializeRequest.ConfigEntry
	0,  // 1: plugin.InitializeRequest.dehydrated_config:type_name -> plugin.DehydratedConfig
	8,  // 2: plugin.GetMetadataRequest.metadata:type_name -> plugin.GetMetadataRequest.MetadataEntry
	9,  // 3: plugin.GetMetadataResponse.metadata:type_name -> plugin.GetMetadataResponse.MetadataEntry
	10, // 4: plugin.InitializeRequest.ConfigEntry.value:type_name -> google.protobuf.Value
	10, // 5: plugin.GetMetadataRequest.MetadataEntry.value:type_name -> google.protobuf.Value
	10, // 6: plugin.GetMetadataResponse.MetadataEntry.value:type_name -> google.protobuf.Value
	1,  // 7: plugin.Plugin.Initialize:input_type -> plugin.InitializeRequest
	3,  // 8: plugin.Plugin.GetMetadata:input_type -> plugin.GetMetadataRequest
	5,  // 9: plugin.Plugin.Close:input_type -> plugin.CloseRequest
	2,  // 10: plugin.Plugin.Initialize:output_type -> plugin.InitializeResponse
	4,  // 11: plugin.Plugin.GetMetadata:output_type -> plugin.GetMetadataResponse
	6,  // 12: plugin.Plugin.Close:output_type -> plugin.CloseResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_plugin_proto_init() }
func file_plugin_proto_init() {
	if File_plugin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_plugin_proto_rawDesc), len(file_plugin_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plugin_proto_goTypes,
		DependencyIndexes: file_plugin_proto_depIdxs,
		MessageInfos:      file_plugin_proto_msgTypes,
	}.Build()
	File_plugin_proto = out.File
	file_plugin_proto_goTypes = nil
	file_plugin_proto_depIdxs = nil
}
